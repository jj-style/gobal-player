// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	globalplayer "github.com/jj-style/gobal-player/cmd/gobal-player-server/internal/biz/globalplayer"
	mock "github.com/stretchr/testify/mock"
)

// MockUseCase is an autogenerated mock type for the UseCase type
type MockUseCase struct {
	mock.Mock
}

type MockUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUseCase) EXPECT() *MockUseCase_Expecter {
	return &MockUseCase_Expecter{mock: &_m.Mock}
}

// GetStations provides a mock function with given fields: ctx
func (_m *MockUseCase) GetStations(ctx context.Context) ([]globalplayer.Station, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStations")
	}

	var r0 []globalplayer.Station
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]globalplayer.Station, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []globalplayer.Station); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]globalplayer.Station)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_GetStations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStations'
type MockUseCase_GetStations_Call struct {
	*mock.Call
}

// GetStations is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUseCase_Expecter) GetStations(ctx interface{}) *MockUseCase_GetStations_Call {
	return &MockUseCase_GetStations_Call{Call: _e.mock.On("GetStations", ctx)}
}

func (_c *MockUseCase_GetStations_Call) Run(run func(ctx context.Context)) *MockUseCase_GetStations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUseCase_GetStations_Call) Return(_a0 []globalplayer.Station, _a1 error) *MockUseCase_GetStations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_GetStations_Call) RunAndReturn(run func(context.Context) ([]globalplayer.Station, error)) *MockUseCase_GetStations_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUseCase creates a new instance of MockUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUseCase {
	mock := &MockUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
