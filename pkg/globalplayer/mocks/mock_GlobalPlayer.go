// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	models "github.com/jj-style/gobal-player/pkg/globalplayer/models"
	mock "github.com/stretchr/testify/mock"
)

// MockGlobalPlayer is an autogenerated mock type for the GlobalPlayer type
type MockGlobalPlayer struct {
	mock.Mock
}

type MockGlobalPlayer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGlobalPlayer) EXPECT() *MockGlobalPlayer_Expecter {
	return &MockGlobalPlayer_Expecter{mock: &_m.Mock}
}

// GetCatchup provides a mock function with given fields: slug
func (_m *MockGlobalPlayer) GetCatchup(slug string) (models.CatchupResponse, error) {
	ret := _m.Called(slug)

	if len(ret) == 0 {
		panic("no return value specified for GetCatchup")
	}

	var r0 models.CatchupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.CatchupResponse, error)); ok {
		return rf(slug)
	}
	if rf, ok := ret.Get(0).(func(string) models.CatchupResponse); ok {
		r0 = rf(slug)
	} else {
		r0 = ret.Get(0).(models.CatchupResponse)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGlobalPlayer_GetCatchup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCatchup'
type MockGlobalPlayer_GetCatchup_Call struct {
	*mock.Call
}

// GetCatchup is a helper method to define mock.On call
//   - slug string
func (_e *MockGlobalPlayer_Expecter) GetCatchup(slug interface{}) *MockGlobalPlayer_GetCatchup_Call {
	return &MockGlobalPlayer_GetCatchup_Call{Call: _e.mock.On("GetCatchup", slug)}
}

func (_c *MockGlobalPlayer_GetCatchup_Call) Run(run func(slug string)) *MockGlobalPlayer_GetCatchup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGlobalPlayer_GetCatchup_Call) Return(_a0 models.CatchupResponse, _a1 error) *MockGlobalPlayer_GetCatchup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGlobalPlayer_GetCatchup_Call) RunAndReturn(run func(string) (models.CatchupResponse, error)) *MockGlobalPlayer_GetCatchup_Call {
	_c.Call.Return(run)
	return _c
}

// GetCatchupShows provides a mock function with given fields: slug, id
func (_m *MockGlobalPlayer) GetCatchupShows(slug string, id string) (models.CatchupShowResponse, error) {
	ret := _m.Called(slug, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCatchupShows")
	}

	var r0 models.CatchupShowResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (models.CatchupShowResponse, error)); ok {
		return rf(slug, id)
	}
	if rf, ok := ret.Get(0).(func(string, string) models.CatchupShowResponse); ok {
		r0 = rf(slug, id)
	} else {
		r0 = ret.Get(0).(models.CatchupShowResponse)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(slug, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGlobalPlayer_GetCatchupShows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCatchupShows'
type MockGlobalPlayer_GetCatchupShows_Call struct {
	*mock.Call
}

// GetCatchupShows is a helper method to define mock.On call
//   - slug string
//   - id string
func (_e *MockGlobalPlayer_Expecter) GetCatchupShows(slug interface{}, id interface{}) *MockGlobalPlayer_GetCatchupShows_Call {
	return &MockGlobalPlayer_GetCatchupShows_Call{Call: _e.mock.On("GetCatchupShows", slug, id)}
}

func (_c *MockGlobalPlayer_GetCatchupShows_Call) Run(run func(slug string, id string)) *MockGlobalPlayer_GetCatchupShows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockGlobalPlayer_GetCatchupShows_Call) Return(_a0 models.CatchupShowResponse, _a1 error) *MockGlobalPlayer_GetCatchupShows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGlobalPlayer_GetCatchupShows_Call) RunAndReturn(run func(string, string) (models.CatchupShowResponse, error)) *MockGlobalPlayer_GetCatchupShows_Call {
	_c.Call.Return(run)
	return _c
}

// GetLive provides a mock function with given fields:
func (_m *MockGlobalPlayer) GetLive() (models.LiveResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLive")
	}

	var r0 models.LiveResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (models.LiveResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() models.LiveResponse); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.LiveResponse)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGlobalPlayer_GetLive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLive'
type MockGlobalPlayer_GetLive_Call struct {
	*mock.Call
}

// GetLive is a helper method to define mock.On call
func (_e *MockGlobalPlayer_Expecter) GetLive() *MockGlobalPlayer_GetLive_Call {
	return &MockGlobalPlayer_GetLive_Call{Call: _e.mock.On("GetLive")}
}

func (_c *MockGlobalPlayer_GetLive_Call) Run(run func()) *MockGlobalPlayer_GetLive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGlobalPlayer_GetLive_Call) Return(_a0 models.LiveResponse, _a1 error) *MockGlobalPlayer_GetLive_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGlobalPlayer_GetLive_Call) RunAndReturn(run func() (models.LiveResponse, error)) *MockGlobalPlayer_GetLive_Call {
	_c.Call.Return(run)
	return _c
}

// GetStations provides a mock function with given fields:
func (_m *MockGlobalPlayer) GetStations() (models.StationsPageResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStations")
	}

	var r0 models.StationsPageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (models.StationsPageResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() models.StationsPageResponse); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.StationsPageResponse)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGlobalPlayer_GetStations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStations'
type MockGlobalPlayer_GetStations_Call struct {
	*mock.Call
}

// GetStations is a helper method to define mock.On call
func (_e *MockGlobalPlayer_Expecter) GetStations() *MockGlobalPlayer_GetStations_Call {
	return &MockGlobalPlayer_GetStations_Call{Call: _e.mock.On("GetStations")}
}

func (_c *MockGlobalPlayer_GetStations_Call) Run(run func()) *MockGlobalPlayer_GetStations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGlobalPlayer_GetStations_Call) Return(_a0 models.StationsPageResponse, _a1 error) *MockGlobalPlayer_GetStations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGlobalPlayer_GetStations_Call) RunAndReturn(run func() (models.StationsPageResponse, error)) *MockGlobalPlayer_GetStations_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGlobalPlayer creates a new instance of MockGlobalPlayer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGlobalPlayer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGlobalPlayer {
	mock := &MockGlobalPlayer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
