// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	models "github.com/jj-style/gobal-player/pkg/globalplayer/models"
	mock "github.com/stretchr/testify/mock"
)

// MockGlobalPlayer is an autogenerated mock type for the GlobalPlayer type
type MockGlobalPlayer struct {
	mock.Mock
}

type MockGlobalPlayer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGlobalPlayer) EXPECT() *MockGlobalPlayer_Expecter {
	return &MockGlobalPlayer_Expecter{mock: &_m.Mock}
}

// GetEpisodes provides a mock function with given fields: stationSlug, showId
func (_m *MockGlobalPlayer) GetEpisodes(stationSlug string, showId string) ([]*models.Episode, error) {
	ret := _m.Called(stationSlug, showId)

	if len(ret) == 0 {
		panic("no return value specified for GetEpisodes")
	}

	var r0 []*models.Episode
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]*models.Episode, error)); ok {
		return rf(stationSlug, showId)
	}
	if rf, ok := ret.Get(0).(func(string, string) []*models.Episode); ok {
		r0 = rf(stationSlug, showId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Episode)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(stationSlug, showId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGlobalPlayer_GetEpisodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEpisodes'
type MockGlobalPlayer_GetEpisodes_Call struct {
	*mock.Call
}

// GetEpisodes is a helper method to define mock.On call
//   - stationSlug string
//   - showId string
func (_e *MockGlobalPlayer_Expecter) GetEpisodes(stationSlug interface{}, showId interface{}) *MockGlobalPlayer_GetEpisodes_Call {
	return &MockGlobalPlayer_GetEpisodes_Call{Call: _e.mock.On("GetEpisodes", stationSlug, showId)}
}

func (_c *MockGlobalPlayer_GetEpisodes_Call) Run(run func(stationSlug string, showId string)) *MockGlobalPlayer_GetEpisodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockGlobalPlayer_GetEpisodes_Call) Return(_a0 []*models.Episode, _a1 error) *MockGlobalPlayer_GetEpisodes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGlobalPlayer_GetEpisodes_Call) RunAndReturn(run func(string, string) ([]*models.Episode, error)) *MockGlobalPlayer_GetEpisodes_Call {
	_c.Call.Return(run)
	return _c
}

// GetShows provides a mock function with given fields: stationSlug
func (_m *MockGlobalPlayer) GetShows(stationSlug string) ([]*models.Show, error) {
	ret := _m.Called(stationSlug)

	if len(ret) == 0 {
		panic("no return value specified for GetShows")
	}

	var r0 []*models.Show
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*models.Show, error)); ok {
		return rf(stationSlug)
	}
	if rf, ok := ret.Get(0).(func(string) []*models.Show); ok {
		r0 = rf(stationSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Show)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(stationSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGlobalPlayer_GetShows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShows'
type MockGlobalPlayer_GetShows_Call struct {
	*mock.Call
}

// GetShows is a helper method to define mock.On call
//   - stationSlug string
func (_e *MockGlobalPlayer_Expecter) GetShows(stationSlug interface{}) *MockGlobalPlayer_GetShows_Call {
	return &MockGlobalPlayer_GetShows_Call{Call: _e.mock.On("GetShows", stationSlug)}
}

func (_c *MockGlobalPlayer_GetShows_Call) Run(run func(stationSlug string)) *MockGlobalPlayer_GetShows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGlobalPlayer_GetShows_Call) Return(_a0 []*models.Show, _a1 error) *MockGlobalPlayer_GetShows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGlobalPlayer_GetShows_Call) RunAndReturn(run func(string) ([]*models.Show, error)) *MockGlobalPlayer_GetShows_Call {
	_c.Call.Return(run)
	return _c
}

// GetStations provides a mock function with given fields:
func (_m *MockGlobalPlayer) GetStations() ([]*models.Station, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStations")
	}

	var r0 []*models.Station
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Station, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Station); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Station)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGlobalPlayer_GetStations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStations'
type MockGlobalPlayer_GetStations_Call struct {
	*mock.Call
}

// GetStations is a helper method to define mock.On call
func (_e *MockGlobalPlayer_Expecter) GetStations() *MockGlobalPlayer_GetStations_Call {
	return &MockGlobalPlayer_GetStations_Call{Call: _e.mock.On("GetStations")}
}

func (_c *MockGlobalPlayer_GetStations_Call) Run(run func()) *MockGlobalPlayer_GetStations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGlobalPlayer_GetStations_Call) Return(_a0 []*models.Station, _a1 error) *MockGlobalPlayer_GetStations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGlobalPlayer_GetStations_Call) RunAndReturn(run func() ([]*models.Station, error)) *MockGlobalPlayer_GetStations_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGlobalPlayer creates a new instance of MockGlobalPlayer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGlobalPlayer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGlobalPlayer {
	mock := &MockGlobalPlayer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
