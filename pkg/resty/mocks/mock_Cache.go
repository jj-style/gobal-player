// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCache is an autogenerated mock type for the Cache type
type MockCache[T interface{}] struct {
	mock.Mock
}

type MockCache_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockCache[T]) EXPECT() *MockCache_Expecter[T] {
	return &MockCache_Expecter[T]{mock: &_m.Mock}
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockCache[T]) Get(_a0 context.Context, _a1 string) (T, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (T, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) T); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCache_Get_Call[T interface{}] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockCache_Expecter[T]) Get(_a0 interface{}, _a1 interface{}) *MockCache_Get_Call[T] {
	return &MockCache_Get_Call[T]{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *MockCache_Get_Call[T]) Run(run func(_a0 context.Context, _a1 string)) *MockCache_Get_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCache_Get_Call[T]) Return(_a0 T, _a1 error) *MockCache_Get_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCache_Get_Call[T]) RunAndReturn(run func(context.Context, string) (T, error)) *MockCache_Get_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCache[T]) Set(_a0 context.Context, _a1 string, _a2 T) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, T) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCache_Set_Call[T interface{}] struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 T
func (_e *MockCache_Expecter[T]) Set(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockCache_Set_Call[T] {
	return &MockCache_Set_Call[T]{Call: _e.mock.On("Set", _a0, _a1, _a2)}
}

func (_c *MockCache_Set_Call[T]) Run(run func(_a0 context.Context, _a1 string, _a2 T)) *MockCache_Set_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(T))
	})
	return _c
}

func (_c *MockCache_Set_Call[T]) Return(_a0 error) *MockCache_Set_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_Set_Call[T]) RunAndReturn(run func(context.Context, string, T) error) *MockCache_Set_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache[T] {
	mock := &MockCache[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
